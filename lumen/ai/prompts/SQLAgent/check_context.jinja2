{% extends 'Agent/main.jinja2' %}

{%- block instructions %}
# Instructions:
Determine discovery steps needed for the CURRENT iteration to answer the user's query.

## Important Context:
- You are on iteration {{ current_iteration }} of {{ max_iterations }}
- You have {{ max_iterations - current_iteration }} iterations remaining
- For complex joins, use ALL available iterations strategically

## Query Classification:

**DIRECT QUERIES** (Single iteration):
- Table/file display: "show table", "display data"
- Simple operations: "count rows", "sum totals"
→ Direct execution without discovery steps

**MULTI_TABLE_JOIN** (Use all 5 iterations):
- Queries requiring joins between 2+ tables
- Complex date/time mappings between tables
- Entity resolution across different naming conventions

## Multi-Table Join Strategy (5 iterations):

**Iteration 1: Exploration (You are here if current_iteration=1)**
- Examine table structures (LIMIT 3-5 rows per table)
- Identify potential join columns
- Understand data types and formats
- Check for naming variations
→ DO NOT attempt joins yet!

**Iteration 2-3: Preprocessing (current_iteration=2 or 3)**
- Create normalized versions of tables using SELECT statements
- Standardize date formats, entity names
- Extract join keys into clean columns
- System will materialize these automatically (no CREATE needed)
→ Focus on ONE table per iteration

**Iteration 4-5: Joining & Answering (current_iteration=4 or 5)**
- Join the preprocessed tables
- Apply final filters and aggregations
- Answer the user's question completely
→ Reference materialized tables from iterations 2-3

## Critical Rules:
- Don't rush! You have 5 iterations - use them wisely
- Each iteration builds on previous results
- Materialize expensive transformations for reuse
- Keep queries simple and focused per iteration

{% endblock %}

{% block examples %}
**Examples:**

**Direct (No steps needed):**
- "Show me the data table" → ['Display the data table']
- "Show customers.csv" → ['Display customers.csv']

**Analysis (Structure check first):**
- "Which entity has the most metric?" → ['Check structure', 'Count metric by entity']

**Discovery:**
- "Show records for [Name]" → ['Find name variations (LIMIT 10)', 'Display matching records']
- "Analyze sales data" → ['Check structure', 'Assess data quality/cleaning needs (LIMIT 10)', 'Perform analysis']
{% endblock %}

{% block context %}
Current Iteration: {{ current_iteration }} of {{ max_iterations }}

{%- if previous_sql_plan_results is defined and previous_sql_plan_results %}
**Previous Iteration Results:**
{{ previous_sql_plan_results }}

{%- if preprocessing_tables %}
**Available Preprocessed Tables:**
{%- for table in preprocessing_tables %}
- {{ table }}
{%- endfor %}
{%- endif %}

**Planning Guidance for Iteration {{ current_iteration }}:**
{%- if current_iteration == 1 %}
First iteration: Focus on exploration and understanding data structures.
If this appears to be a multi-table query, examine table structures and identify join columns.
Do NOT attempt joins yet - save that for later iterations.
{%- elif current_iteration in [2, 3] %}
Middle iterations: If working with multi-table joins, create preprocessed tables with clean join keys.
Materialize results for reuse. Pick ONE table to preprocess this iteration.
{%- elif current_iteration in [4, 5] %}
Later iterations: If working with multi-table joins, now you can join!
Use any preprocessed tables from previous iterations.
{%- if current_iteration == 5 %}**FINAL ITERATION:** Must provide complete answer to user's question{%- endif %}
{%- endif %}

{%- else %}
**First Iteration - Exploration Phase**
{%- if "join" in user_query.lower() or involves_multiple_tables %}
This appears to be a multi-table query. Plan to use all 5 iterations:
1. Explore tables (current)
2-3. Preprocess tables
4-5. Join and answer
{%- endif %}
{%- endif %}

**Available Schema:**
{{ memory["sql_metaset"].compact_context }}
{%- endblock %}
