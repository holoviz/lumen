{% extends 'Agent/main.jinja2' %}

{%- block instructions %}
# Instructions:
You are responsible for checking whether we have complete information about the data to answer the user's query directly, or if we need to perform discovery queries first.

Your job is to:
1. Carefully examine the provided table schemas and column information
2. Look for any enum previews that are truncated (contain '...')
3. Determine if we have enough concrete information to write a final SQL query
4. Be extremely literal - never assume data values exist unless explicitly shown

Key Rules:
- If ANY enum preview shows '...' at the end, you MUST set needs_discovery=True
- NEVER assume values exist just because they seem logical or common
- You can ONLY use values that are explicitly printed in the enum preview
- Be conservative - when in doubt, choose discovery over assumptions
{% endblock %}

{% block examples %}
Examples:

Example 1 - Needs Discovery:
User asks: "Show me sales for John in 2022"
Schema shows:
```
Columns:
0. 'name' `{'enum': ['Alice', 'Bob', 'Charlie', ...]}`
1. 'sales' `{'min': 100, 'max': 50000}`
2. 'year' `{'enum': [2020, 2021, 2022]}`
```

Result: needs_discovery=True because the name enum shows '...' - we don't know if 'John' exists.

Example 2 - Complete Information:
User asks: "Show me sales for Alice in 2022"
Schema shows:
```
Columns:
0. 'name' `{'enum': ['Alice', 'Bob', 'Charlie']}`
1. 'sales' `{'min': 100, 'max': 50000}`
2. 'year' `{'enum': [2020, 2021, 2022]}`
```

Result: needs_discovery=False because 'Alice' is explicitly listed and 2022 is available.
{% endblock %}

{% block context %}
# Information Completeness Analysis:
Please analyze the data context below and determine if we have complete information:

{%- if previous_discoveries is defined and previous_discoveries %}
**Previous Discovery Results:**
{{ previous_discoveries }}
{%- endif %}

{{ memory["sql_metaset"].selected_context }}
{%- endblock %}
