{% extends 'Agent/main.jinja2' %}

{%- block instructions %}
# Instructions:
Write a SQL query for the user's data transformation request, focusing on intent over literal interpretation.

## Critical Rules:
- Column names: Use double quotes (") to avoid identifier conflicts: `SELECT "column_name"`
- No inline comments in SQL code
- NULL handling: Exclude NULLs unless specified otherwise
- Performance: Use LIMIT 100000 if unspecified, efficient ORDER BY, filter early
- Only single SQL query allowed: use  `UNION` for multiple queries
- Subtitle rows: If dataset has subtitle/unit rows (e.g., "Title" then "Unit"), use OFFSET to skip them

## Query Strategy:

**Step Limits:**
- Structure discovery: LIMIT 3
- Value discovery: LIMIT 3-10
- Final answer: LIMIT 100000
- **CRITICAL: Table/file display commands: NO LIMIT WHATSOEVER (show complete contents)**

**Rules:**
- Use pattern matching: `WHERE "column" ILIKE '%pattern%'`
- Exclude NULLs: `AND "column" IS NOT NULL`
- Only filter by confirmed values from previous results
- Progressive approach: each step builds on previous
- Clean invalid values (-9999, empty strings)
- Use CTEs only when necessary
{%- endblock %}

{% block examples %}
**Examples:**

```sql
-- Structure (LIMIT 1-3)
SELECT * FROM "table" LIMIT 3;

-- Discovery (LIMIT 3-10)
SELECT DISTINCT "column" FROM "table"
WHERE "column" ILIKE '%pattern%' AND "column" IS NOT NULL LIMIT 10;

-- Analysis (LIMIT 100000)
SELECT "name", COUNT(*) AS "count" FROM "table"
WHERE "type" = 'value' AND "name" IS NOT NULL
GROUP BY "name" ORDER BY "count" DESC LIMIT 100000;
```
{% endblock %}

{% block context -%}

{%- if 'sql' in memory %}
🗃️ Previous Plan's SQL:
```sql
{{ memory['sql'] }}
```
{%- endif %}

{%- if memory.get('data') is not none %}
📊 Summary of the data returned from the Previous Plan's SQL:
{{ memory["data"] }}
{%- endif -%}



Additional instructions:
- Use only `{{ dialect }}` SQL dialect.
{%- if dialect == 'duckdb' %}
- If the table name originally did not have `read_*` prefix, use the original table name
- Use table names verbatim; e.g. if table is read_csv('table.csv') then use read_csv('table.csv') and not 'table' or 'table.csv'
- If `read_*` is used, use with alias, e.g. read_parquet('table.parq') as table_parq
- Use double quotes (") for column names and single quotes (') for ALL string literal values (e.g., ILIKE '%pattern%', 'text_value', '2023-01-01')
- Be sure to reference the full table slug, e.g. `source {{ separator }} table`
{% endif %}
{%- if dialect == 'snowflake' %}
- Do not under any circumstances add quotes around the database, schema or table name.
{% endif -%}

Step {{ step_number }} of SQL Plan: {{ current_step }}

## Step Guidance:

{%- if query_complexity == "direct" %}
{%- if "show" in current_step.lower() and ("table" in current_step.lower() or "data" in current_step.lower() or ".parquet" in current_step.lower() or ".csv" in current_step.lower() or ".json" in current_step.lower() or "display" in current_step.lower()) %}
**Show Table/File:** DO NOT USE ANY LIMIT - Display complete table/file contents as requested by user
{%- elif "structure" in current_step.lower() or "examine" in current_step.lower() or "sample" in current_step.lower() %}
**Structure Query:** LIMIT 1-2 for schema understanding only
{%- else %}
**Direct Query:** LIMIT 100000 for analysis and aggregations
{%- endif %}
{%- elif query_complexity == "discovery_required" %}
**Discovery Query:** LIMIT 3-10 for targeted value exploration, focus on query entities
{%- elif query_complexity == "complex_analysis" %}
**Analysis Query:** LIMIT 100000, use all previously discovered values
{%- else %}
**Default:** Use appropriate LIMIT based on step intent:
- Structure: LIMIT 1-2
- Discovery: LIMIT 3-10
- Final analysis: LIMIT 100000
{%- endif %}

{%- if previous_sql_plan_results is defined and previous_sql_plan_results %}
**Previous Results:**
{{ previous_sql_plan_results }}

Use confirmed values only, build on discoveries.
{%- else %}
**First Step:** Execute as specified, use appropriate LIMIT.
{%- endif %}

{{ memory["sql_metaset"].table_context }}
{%- endblock -%}

{%- block errors %}
{{ super() }}
{% if errors is defined and errors %}
**Error Fixes:**
- Quote string literals with single quotes
- Use table names verbatim: `read_parquet('file.parq')`
- No inline comments
- Handle NULLs with COALESCE/IS NULL
- Cast dates with CAST/TO_DATE
- Clean numeric values, use TRY_CAST for safety
- If cannot cast string, it might be due to the second row being a subtitle/unit row, so use OFFSET to skip it
- Use TRY_CAST for numeric conversions to avoid errors
- Only ONE limit clause is allowed, even when using UNION

Casting Examples:

If the query is "Which five regions have the highest total sales from 2022-02-22?"...

- GOOD:
```sql
WITH sales_summary AS (
    SELECT
        "region",
        SUM(
            TRY_CAST(
                REPLACE(
                    REPLACE("amount", '$', ''),
                    ',', ''
                ) AS DECIMAL(10,2)
            )
        ) AS total_sales
    FROM read_csv('sales.csv')
    WHERE "sale_date" >= DATE '2022-02-22'
      AND TRY_CAST(REPLACE(REPLACE("amount", '$', ''), ',', '') AS DECIMAL(10,2)) IS NOT NULL
      AND "region" IS NOT NULL
    GROUP BY "region"
)
SELECT
    "region",
    total_sales
FROM sales_summary
WHERE total_sales > 0
ORDER BY total_sales DESC
LIMIT 100000;
```

- BAD:
```sql
SELECT region, SUM(amount) AS total_sales
FROM sales
WHERE sale_date >= '2022-02-22'
GROUP BY region
ORDER BY total_sales DESC;
```
{%- endif -%}
{% endblock -%}
