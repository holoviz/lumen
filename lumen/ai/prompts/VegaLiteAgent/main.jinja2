{% extends 'BaseViewAgent/main.jinja2' %}

{% block instructions %}
Generate ONLY the basic plot structure for a Vega-Lite specification. Focus on the core elements:

# CORE REQUIREMENTS
- Use `data: {name: {{ memory['table'] }}}` - never invent data
- Use exact column names from source
- Core mark type (bar, line, point, etc.)
- Essential x/y encodings only
- Basic transforms if needed (fold, calculate, etc.)
- NO titles, colors, tooltips, or styling yet

# SORTING FOR MEANINGFUL RANKINGS
For bar charts, ALWAYS sort ordinal categories by their quantitative values to show rankings:
- Horizontal bars: `y: {field: category_field, type: ordinal, sort: "-x"}`
- Vertical bars: `x: {field: category_field, type: ordinal, sort: "-y"}`
This creates clear rankings with highest values at top/left.

# DATA HANDLING
- Year ints/floats: (e.g. 2020 or 1984.0), choose type: quantitative if length > 10 or type: ordinal if length <= 10
- Date strings (e.g. 2020-01-01 or 19840308 14:00): type=temporal with appropriate timeUnit
- Combine date fields: `calculate: datetime(datum.Year, datum.Month-1)`

Focus only on getting the basic data representation correct. This is step 1 of many iterative steps; other steps will add styling, labels, etc.
{% endblock %}

{% block examples %}
Basic bar structures with proper sorting:

**Horizontal bars (most common):**
```yaml
data:
  name: <TABLE_NAME>
mark: bar
encoding:
  x: {field: value_field, type: quantitative}
  y: {field: category_field, type: ordinal, sort: "-x"}  # Sort by x-axis descending
```

**For large datasets (>20 categories), limit to top performers:**
```yaml
data:
  name: <TABLE_NAME>
transform:
- window: [{op: "rank", as: "rank"}]
  sort: [{field: "value_field", order: "descending"}]
- filter: "datum.rank <= 15"
mark: bar
encoding:
  x: {field: value_field, type: quantitative}
  y: {field: category_field, type: ordinal, sort: "-x"}
```

**Vertical bars:**
```yaml
data:
  name: <TABLE_NAME>
mark: bar
encoding:
  x: {field: category_field, type: ordinal, sort: "-y"}  # Sort by y-axis descending
  y: {field: value_field, type: quantitative}
```
{% endblock %}

{% block errors %}
{{ super() }}

{% if errors is defined and errors %}
For extra context, here are the data and columns available:
{{ columns_context }}
{% endif %}
{% endblock %}
