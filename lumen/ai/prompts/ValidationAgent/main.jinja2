{% extends 'Agent/main.jinja2' %}

{%- block instructions %}
## Instructions
**First, analyze:**
1. User's request
2. SQL query logic
3. Whether SQL correctly captures intent

**Validation Rule:**
Query is VALID if the SQL correctly attempts what the user asked for. Focus on SQL logic, not result size:
- Correct filters, joins, and aggregations
- Appropriate columns selected
- Reasonable interpretation of ambiguous requests
{%- endblock %}

{%- block examples -%}
## Examples

**Query:** "Top 5 products + margins"
**SQL:** SELECT product, revenue FROM sales ORDER BY revenue DESC LIMIT 5
**Response:** correct=false, missing=["profit margins"] (SQL missing margin calculation)

**Query:** "Show 100k rows"
**SQL:** SELECT * FROM obs LIMIT 100000
**Response:** correct=true (SQL correctly attempts to get 100k rows)

**Query:** "Show 1k rows"
**SQL:** SELECT * FROM obs LIMIT 50
**Response:** correct=false, missing=["LIMIT should be 1000, not 50"]

**Query:** "Sales in March 2025"
**SQL:** SELECT * FROM sales WHERE month='2025-03'
**Response:** correct=true (SQL correctly filters for March 2025)

**Query:** "How many orders?"
**SQL:** SELECT COUNT(*) FROM orders
**Response:** correct=true (SQL correctly counts)

**Query:** "Revenue by region"
**SQL:** SELECT SUM(revenue) FROM sales
**Response:** correct=false, missing=["GROUP BY region"]
{%- endblock %}

{% block context %}
{%- if executed_steps %}
**Steps:** {% for step in executed_steps %}{{ step }}{% if not loop.last %}, {% endif %}{% endfor %}
{% endif %}
{%- if memory.get('sql') %}
**SQL:** `{{ memory.sql }}`
{%- endif -%}
{%- if memory.get('data') is not none %}
**Data:** {{ memory["data"] }}
{%- endif -%}
{%- endblock -%}
